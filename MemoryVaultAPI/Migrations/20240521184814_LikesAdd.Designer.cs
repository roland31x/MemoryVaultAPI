// <auto-generated />
using System;
using MemoryVaultAPI;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MemoryVaultAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240521184814_LikesAdd")]
    partial class LikesAdd
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MemoryVaultAPI.Models.Account", b =>
                {
                    b.Property<int>("AccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(16)");

                    b.HasKey("AccountID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("MemoryVaultAPI.Models.Like", b =>
                {
                    b.Property<int>("MemoryID")
                        .HasColumnType("int");

                    b.Property<int>("LikerID")
                        .HasColumnType("int");

                    b.HasKey("MemoryID", "LikerID");

                    b.HasIndex("LikerID");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("MemoryVaultAPI.Models.Memory", b =>
                {
                    b.Property<int>("MemoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemoryID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("OwnerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Public")
                        .HasColumnType("bit");

                    b.HasKey("MemoryID");

                    b.HasIndex("OwnerID");

                    b.ToTable("Memories");
                });

            modelBuilder.Entity("MemoryVaultAPI.Models.Like", b =>
                {
                    b.HasOne("MemoryVaultAPI.Models.Account", "Liker")
                        .WithMany("Likes")
                        .HasForeignKey("LikerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MemoryVaultAPI.Models.Memory", "Memory")
                        .WithMany("Likes")
                        .HasForeignKey("MemoryID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Liker");

                    b.Navigation("Memory");
                });

            modelBuilder.Entity("MemoryVaultAPI.Models.Memory", b =>
                {
                    b.HasOne("MemoryVaultAPI.Models.Account", "Owner")
                        .WithMany("Memories")
                        .HasForeignKey("OwnerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("MemoryVaultAPI.Models.Image", "Images", b1 =>
                        {
                            b1.Property<int>("MemoryID")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<byte[]>("bytes")
                                .IsRequired()
                                .HasColumnType("varbinary(max)");

                            b1.HasKey("MemoryID", "Id");

                            b1.ToTable("Image");

                            b1.WithOwner()
                                .HasForeignKey("MemoryID");
                        });

                    b.Navigation("Images");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("MemoryVaultAPI.Models.Account", b =>
                {
                    b.Navigation("Likes");

                    b.Navigation("Memories");
                });

            modelBuilder.Entity("MemoryVaultAPI.Models.Memory", b =>
                {
                    b.Navigation("Likes");
                });
#pragma warning restore 612, 618
        }
    }
}
